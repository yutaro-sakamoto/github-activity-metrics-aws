// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
{
  "Metadata": {
    "cdk_nag": {
      "rules_to_suppress": [
        {
          "id": "AwsSolutions-IAM4",
          "reason": "Managed policies are acceptable during the prototype phase",
        },
        {
          "id": "AwsSolutions-L1",
          "reason": "Demo Lambda functions use inline code",
        },
        {
          "id": "AwsSolutions-IAM5",
          "reason": "Wildcard permissions are acceptable during the prototype phase",
        },
        {
          "id": "AwsSolutions-APIG2",
          "reason": "GitHub webhooks require custom authentication, request validation is implemented with Lambda integration",
        },
        {
          "id": "AwsSolutions-APIG4",
          "reason": "GitHub webhooks require custom authentication, request validation is implemented with Lambda integration",
        },
        {
          "id": "AwsSolutions-COG4",
          "reason": "GitHub webhooks use custom Lambda integration instead of Cognito user pools",
        },
      ],
    },
  },
  "Outputs": {
    "TimestreamDatabaseName": {
      "Description": "Timestream database where GitHub webhook data is stored",
      "Value": {
        "Ref": "StorageGitHubWebhookDatabase916D4ADC",
      },
    },
    "TimestreamTableName": {
      "Description": "Timestream table where GitHub webhook data is stored",
      "Value": {
        "Ref": "StorageGitHubWebhookTable62713D45",
      },
    },
    "WebhookApiUrl": {
      "Description": "URL for configuring GitHub Webhook",
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Fn::GetAtt": [
                "ApiGatewayGitHubWebhookApi04159D43",
                "ApiEndpoint",
              ],
            },
            "/v2/webhooks",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiGatewayApiGatewayAccessLogsBucketB1D5C7F7": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-S1",
              "reason": "Access logs are not enabled for the access logs bucket",
            },
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiGatewayApiGatewayAccessLogsBucketPolicy5D47EADE": {
      "Properties": {
        "Bucket": {
          "Ref": "ApiGatewayApiGatewayAccessLogsBucketB1D5C7F7",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiGatewayApiGatewayAccessLogsBucketB1D5C7F7",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiGatewayApiGatewayAccessLogsBucketB1D5C7F7",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "ApiGatewayGitHubWebhookApi04159D43": {
      "Properties": {
        "CorsConfiguration": {
          "AllowHeaders": [
            "Content-Type",
            "X-GitHub-Event",
            "X-GitHub-Delivery",
            "X-Hub-Signature-256",
          ],
          "AllowMethods": [
            "POST",
          ],
          "AllowOrigins": [
            "*",
          ],
        },
        "Description": "API for receiving GitHub webhooks",
        "Name": "GitHub Webhook API",
        "ProtocolType": "HTTP",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "ApiGatewayGitHubWebhookApiPOSTwebhooksA1D2A511": {
      "Properties": {
        "ApiId": {
          "Ref": "ApiGatewayGitHubWebhookApi04159D43",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "POST /webhooks",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "ApiGatewayGitHubWebhookApiPOSTwebhooksWebhookIntegrationF79D2E5E",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "ApiGatewayGitHubWebhookApiPOSTwebhooksWebhookIntegrationF79D2E5E": {
      "Properties": {
        "ApiId": {
          "Ref": "ApiGatewayGitHubWebhookApi04159D43",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "WebhookHandler40BDAF19",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "ApiGatewayGitHubWebhookApiPOSTwebhooksWebhookIntegrationPermission6B1B9BB0": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebhookHandler40BDAF19",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:ap-northeast-1:123456789012:",
              {
                "Ref": "ApiGatewayGitHubWebhookApi04159D43",
              },
              "/*/*/webhooks",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiGatewayV2Stage11209772": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG1",
              "reason": "API Gateway stage does not have access logs enabled",
            },
          ],
        },
      },
      "Properties": {
        "ApiId": {
          "Ref": "ApiGatewayGitHubWebhookApi04159D43",
        },
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": true,
          "ThrottlingBurstLimit": 100,
          "ThrottlingRateLimit": 50,
        },
        "StageName": "v2",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "StorageGitHubWebhookBackupPlanFF4D1592": {
      "Properties": {
        "BackupPlan": {
          "BackupPlanName": "github-webhook-daily-backup",
          "BackupPlanRule": [
            {
              "Lifecycle": {
                "DeleteAfterDays": 14,
                "MoveToColdStorageAfterDays": 7,
              },
              "RuleName": "DailyBackup-3AM-JST",
              "ScheduleExpression": "cron(0 18 ? * * *)",
              "TargetBackupVault": {
                "Fn::GetAtt": [
                  "StorageGitHubWebhookBackupVault68AB98EA",
                  "BackupVaultName",
                ],
              },
            },
          ],
        },
      },
      "Type": "AWS::Backup::BackupPlan",
    },
    "StorageGitHubWebhookBackupPlanTimestreamSelection9590ABEA": {
      "Properties": {
        "BackupPlanId": {
          "Fn::GetAtt": [
            "StorageGitHubWebhookBackupPlanFF4D1592",
            "BackupPlanId",
          ],
        },
        "BackupSelection": {
          "IamRoleArn": {
            "Fn::GetAtt": [
              "StorageGitHubWebhookBackupPlanTimestreamSelectionRoleCBDF0EDE",
              "Arn",
            ],
          },
          "Resources": [
            "arn:aws:timestream:ap-northeast-1:123456789012:database/github_webhook_data",
          ],
          "SelectionName": "TimestreamSelection",
        },
      },
      "Type": "AWS::Backup::BackupSelection",
    },
    "StorageGitHubWebhookBackupPlanTimestreamSelectionRoleCBDF0EDE": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "backup.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageGitHubWebhookBackupVault68AB98EA": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "BackupVaultName": "github-webhook-backup-vault",
      },
      "Type": "AWS::Backup::BackupVault",
      "UpdateReplacePolicy": "Retain",
    },
    "StorageGitHubWebhookDatabase916D4ADC": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies are acceptable during the prototype phase",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Wildcard permissions are acceptable during the prototype phase",
            },
          ],
        },
      },
      "Properties": {
        "DatabaseName": "github_webhook_data",
      },
      "Type": "AWS::Timestream::Database",
    },
    "StorageGitHubWebhookTable62713D45": {
      "DependsOn": [
        "StorageGitHubWebhookDatabase916D4ADC",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies are acceptable during the prototype phase",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Wildcard permissions are acceptable during the prototype phase",
            },
          ],
        },
      },
      "Properties": {
        "DatabaseName": "github_webhook_data",
        "RetentionProperties": {
          "magneticStoreRetentionPeriodInDays": "365",
          "memoryStoreRetentionPeriodInHours": "24",
        },
        "TableName": "github_events",
      },
      "Type": "AWS::Timestream::Table",
    },
    "WebhookHandler40BDAF19": {
      "DependsOn": [
        "WebhookHandlerServiceRoleDefaultPolicyE376E30C",
        "WebhookHandlerServiceRoleF07A4D12",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-123456789012-ap-northeast-1",
          "S3Key": "9a7d14cc479c54bae0848f871ee893696311979bf3dcc1aaf06d539a5ff7fa9e.zip",
        },
        "Environment": {
          "Variables": {
            "TIMESTREAM_DATABASE_NAME": "github_webhook_data",
            "TIMESTREAM_TABLE_NAME": "github_events",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "WebhookHandlerServiceRoleF07A4D12",
            "Arn",
          ],
        },
        "Runtime": "nodejs22.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "WebhookHandlerServiceRoleDefaultPolicyE376E30C": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:ap-northeast-1:123456789012:parameter/github/metrics/secret-token",
                  ],
                ],
              },
            },
            {
              "Action": "timestream:*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "timestream:DescribeEndpoints",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WebhookHandlerServiceRoleDefaultPolicyE376E30C",
        "Roles": [
          {
            "Ref": "WebhookHandlerServiceRoleF07A4D12",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WebhookHandlerServiceRoleF07A4D12": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Snapshot 2`] = `
{
  "Metadata": {
    "cdk_nag": {
      "rules_to_suppress": [
        {
          "id": "AwsSolutions-IAM4",
          "reason": "Managed policies are acceptable during the prototype phase",
        },
        {
          "id": "AwsSolutions-L1",
          "reason": "Demo Lambda functions use inline code",
        },
        {
          "id": "AwsSolutions-IAM5",
          "reason": "Wildcard permissions are acceptable during the prototype phase",
        },
        {
          "id": "AwsSolutions-APIG2",
          "reason": "GitHub webhooks require custom authentication, request validation is implemented with Lambda integration",
        },
        {
          "id": "AwsSolutions-APIG4",
          "reason": "GitHub webhooks require custom authentication, request validation is implemented with Lambda integration",
        },
        {
          "id": "AwsSolutions-COG4",
          "reason": "GitHub webhooks use custom Lambda integration instead of Cognito user pools",
        },
      ],
    },
  },
  "Outputs": {
    "TimestreamDatabaseName": {
      "Description": "Timestream database where GitHub webhook data is stored",
      "Value": {
        "Ref": "StorageGitHubWebhookDatabase916D4ADC",
      },
    },
    "TimestreamTableName": {
      "Description": "Timestream table where GitHub webhook data is stored",
      "Value": {
        "Ref": "StorageGitHubWebhookTable62713D45",
      },
    },
    "WebhookApiUrl": {
      "Description": "URL for configuring GitHub Webhook",
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Fn::GetAtt": [
                "ApiGatewayGitHubWebhookApi04159D43",
                "ApiEndpoint",
              ],
            },
            "/v2/webhooks",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiGatewayApiGatewayAccessLogsBucketAutoDeleteObjectsCustomResource4A8FB541": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "ApiGatewayApiGatewayAccessLogsBucketPolicy5D47EADE",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "ApiGatewayApiGatewayAccessLogsBucketB1D5C7F7",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiGatewayApiGatewayAccessLogsBucketB1D5C7F7": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-S1",
              "reason": "Access logs are not enabled for the access logs bucket",
            },
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiGatewayApiGatewayAccessLogsBucketPolicy5D47EADE": {
      "Properties": {
        "Bucket": {
          "Ref": "ApiGatewayApiGatewayAccessLogsBucketB1D5C7F7",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiGatewayApiGatewayAccessLogsBucketB1D5C7F7",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiGatewayApiGatewayAccessLogsBucketB1D5C7F7",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiGatewayApiGatewayAccessLogsBucketB1D5C7F7",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiGatewayApiGatewayAccessLogsBucketB1D5C7F7",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "ApiGatewayGitHubWebhookApi04159D43": {
      "Properties": {
        "CorsConfiguration": {
          "AllowHeaders": [
            "Content-Type",
            "X-GitHub-Event",
            "X-GitHub-Delivery",
            "X-Hub-Signature-256",
          ],
          "AllowMethods": [
            "POST",
          ],
          "AllowOrigins": [
            "*",
          ],
        },
        "Description": "API for receiving GitHub webhooks",
        "Name": "GitHub Webhook API",
        "ProtocolType": "HTTP",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "ApiGatewayGitHubWebhookApiPOSTwebhooksA1D2A511": {
      "Properties": {
        "ApiId": {
          "Ref": "ApiGatewayGitHubWebhookApi04159D43",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "POST /webhooks",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "ApiGatewayGitHubWebhookApiPOSTwebhooksWebhookIntegrationF79D2E5E",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "ApiGatewayGitHubWebhookApiPOSTwebhooksWebhookIntegrationF79D2E5E": {
      "Properties": {
        "ApiId": {
          "Ref": "ApiGatewayGitHubWebhookApi04159D43",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "WebhookHandler40BDAF19",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "ApiGatewayGitHubWebhookApiPOSTwebhooksWebhookIntegrationPermission6B1B9BB0": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebhookHandler40BDAF19",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:ap-northeast-1:123456789012:",
              {
                "Ref": "ApiGatewayGitHubWebhookApi04159D43",
              },
              "/*/*/webhooks",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiGatewayV2Stage11209772": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG1",
              "reason": "API Gateway stage does not have access logs enabled",
            },
          ],
        },
      },
      "Properties": {
        "ApiId": {
          "Ref": "ApiGatewayGitHubWebhookApi04159D43",
        },
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": true,
          "ThrottlingBurstLimit": 100,
          "ThrottlingRateLimit": 50,
        },
        "StageName": "v2",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-123456789012-ap-northeast-1",
          "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip",
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "ApiGatewayApiGatewayAccessLogsBucketB1D5C7F7",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageGitHubWebhookBackupPlanFF4D1592": {
      "Properties": {
        "BackupPlan": {
          "BackupPlanName": "github-webhook-daily-backup",
          "BackupPlanRule": [
            {
              "Lifecycle": {
                "DeleteAfterDays": 14,
                "MoveToColdStorageAfterDays": 7,
              },
              "RuleName": "DailyBackup-3AM-JST",
              "ScheduleExpression": "cron(0 18 ? * * *)",
              "TargetBackupVault": {
                "Fn::GetAtt": [
                  "StorageGitHubWebhookBackupVault68AB98EA",
                  "BackupVaultName",
                ],
              },
            },
          ],
        },
      },
      "Type": "AWS::Backup::BackupPlan",
    },
    "StorageGitHubWebhookBackupPlanTimestreamSelection9590ABEA": {
      "Properties": {
        "BackupPlanId": {
          "Fn::GetAtt": [
            "StorageGitHubWebhookBackupPlanFF4D1592",
            "BackupPlanId",
          ],
        },
        "BackupSelection": {
          "IamRoleArn": {
            "Fn::GetAtt": [
              "StorageGitHubWebhookBackupPlanTimestreamSelectionRoleCBDF0EDE",
              "Arn",
            ],
          },
          "Resources": [
            "arn:aws:timestream:ap-northeast-1:123456789012:database/github_webhook_data",
          ],
          "SelectionName": "TimestreamSelection",
        },
      },
      "Type": "AWS::Backup::BackupSelection",
    },
    "StorageGitHubWebhookBackupPlanTimestreamSelectionRoleCBDF0EDE": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "backup.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageGitHubWebhookBackupVault68AB98EA": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "BackupVaultName": "github-webhook-backup-vault",
      },
      "Type": "AWS::Backup::BackupVault",
      "UpdateReplacePolicy": "Retain",
    },
    "StorageGitHubWebhookDatabase916D4ADC": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies are acceptable during the prototype phase",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Wildcard permissions are acceptable during the prototype phase",
            },
          ],
        },
      },
      "Properties": {
        "DatabaseName": "github_webhook_data",
      },
      "Type": "AWS::Timestream::Database",
    },
    "StorageGitHubWebhookTable62713D45": {
      "DependsOn": [
        "StorageGitHubWebhookDatabase916D4ADC",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies are acceptable during the prototype phase",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Wildcard permissions are acceptable during the prototype phase",
            },
          ],
        },
      },
      "Properties": {
        "DatabaseName": "github_webhook_data",
        "RetentionProperties": {
          "magneticStoreRetentionPeriodInDays": "365",
          "memoryStoreRetentionPeriodInHours": "24",
        },
        "TableName": "github_events",
      },
      "Type": "AWS::Timestream::Table",
    },
    "WebhookHandler40BDAF19": {
      "DependsOn": [
        "WebhookHandlerServiceRoleDefaultPolicyE376E30C",
        "WebhookHandlerServiceRoleF07A4D12",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-123456789012-ap-northeast-1",
          "S3Key": "9a7d14cc479c54bae0848f871ee893696311979bf3dcc1aaf06d539a5ff7fa9e.zip",
        },
        "Environment": {
          "Variables": {
            "TIMESTREAM_DATABASE_NAME": "github_webhook_data",
            "TIMESTREAM_TABLE_NAME": "github_events",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "WebhookHandlerServiceRoleF07A4D12",
            "Arn",
          ],
        },
        "Runtime": "nodejs22.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "WebhookHandlerServiceRoleDefaultPolicyE376E30C": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:ap-northeast-1:123456789012:parameter/github/metrics/secret-token",
                  ],
                ],
              },
            },
            {
              "Action": "timestream:*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "timestream:DescribeEndpoints",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WebhookHandlerServiceRoleDefaultPolicyE376E30C",
        "Roles": [
          {
            "Ref": "WebhookHandlerServiceRoleF07A4D12",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WebhookHandlerServiceRoleF07A4D12": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
